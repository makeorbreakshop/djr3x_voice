/**
 * Auto-generated TypeScript interfaces for CantinaOS Web Dashboard
 * 
 * Generated on: 2025-06-11T08:37:35.644706
 * Source: cantina_os/core/event_payloads.py and cantina_os/schemas/web_commands.py
 * 
 * DO NOT EDIT MANUALLY - This file is automatically generated
 * Run: python scripts/generate_typescript_interfaces.py
 */

// Status Payload Interfaces (outbound to frontend)
export interface WebMusicStatusPayload {
  action?: "started" | "stopped" | "paused" | "resumed" | "track_changed" | "volume_changed";
  track?: any;
  source?: string;
  mode?: string;
  volume?: any;
  timestamp?: string;
}

export interface WebVoiceStatusPayload {
  status?: "idle" | "recording" | "processing" | "speaking" | "error";
  transcript?: any;
  confidence?: any;
  error?: any;
  timestamp?: string;
}

export interface WebSystemStatusPayload {
  cantina_os_connected?: boolean;
  current_mode?: string;
  services?: Record<string, any>;
  arduino_connected?: boolean;
  timestamp?: string;
}

export interface WebDJStatusPayload {
  mode?: "idle" | "active" | "transitioning";
  current_track?: any;
  next_track?: any;
  personality_mode?: any;
  timestamp?: string;
}

export interface WebServiceStatusPayload {
  service_name?: string;
  status?: "starting" | "running" | "degraded" | "error" | "stopped";
  error?: any;
  details?: any;
  timestamp?: string;
}

export interface WebProgressPayload {
  operation?: string;
  progress?: number;
  status?: string;
  details?: any;
  timestamp?: string;
}

// Command Interfaces (inbound from frontend)
export interface VoiceCommand {
  action?: "start" | "stop";
  source?: string;
  timestamp?: any;
  command_id?: string;
}

export interface MusicCommand {
  action?: "play" | "pause" | "resume" | "stop" | "next" | "queue" | "volume";
  source?: string;
  timestamp?: any;
  command_id?: string;
  track_name?: any;
  track_id?: any;
  volume_level?: any;
}

export interface DJCommand {
  action?: "start" | "stop" | "next" | "update_settings";
  source?: string;
  timestamp?: any;
  command_id?: string;
  auto_transition?: any;
  transition_duration?: any;
  genre_preference?: any;
}

export interface SystemCommand {
  action?: "set_mode" | "restart" | "refresh_config";
  source?: string;
  timestamp?: any;
  command_id?: string;
  mode?: any;
  restart_delay?: any;
}

// Enum Types
export type ServiceStatus = "starting" | "running" | "degraded" | "error" | "stopped";
export type LogLevel = "debug" | "info" | "warning" | "error" | "critical";

// Utility Types
export interface CantinaEvent<T = any> {
  topic: string;
  data: T;
  timestamp: string;
}

export interface WebSocketResponse {
  success: boolean;
  message?: string;
  error?: string;
  data?: any;
}